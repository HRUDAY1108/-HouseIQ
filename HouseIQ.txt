import streamlit as st
import pandas as pd
import joblib
import numpy as np

# ==================================================
# 1Ô∏è‚É£ LOAD MODEL & TRAINING COLUMNS
# ==================================================
model = joblib.load('ames_model.pkl')
train_columns = pd.read_csv('train_columns.csv')['columns'].tolist()

# ==================================================
# 2Ô∏è‚É£ APP HEADER
# ==================================================
st.title("üè† Ames Housing Price Predictor")
st.markdown("""
Enter the details of the house, and we'll predict its sale price.
""")

# ==================================================
# 3Ô∏è‚É£ USER INPUTS
# ==================================================
user_inputs = {}

user_inputs["LotArea"] = st.number_input("Lot Area (sq ft):", value=8000, step=100)
user_inputs["OverallQual"] = st.slider("Overall Quality (1‚Äì10):", 1, 10, 5)
user_inputs["YearBuilt"] = st.number_input("Year Built:", value=2000, step=1)

# Optional Feature
user_inputs["HouseAge"] = 2024 - user_inputs["YearBuilt"]

# ==================================================
# 4Ô∏è‚É£ BUILD USER DATAFRAME
# ==================================================
user_data = pd.DataFrame([user_inputs])

# Ensure columns match training columns
user_data = user_data.reindex(columns=train_columns, fill_value=0)

# ==================================================
# 5Ô∏è‚É£ PREDICTION
# ==================================================
if st.button("Predict Sale Price üíµ"):
    prediction = model.predict(user_data)
    st.markdown(f"### üèÅ Predicted Sale Price: ${prediction[0]:,.2f}")

# ==================================================
# 6Ô∏è‚É£ FEATURE IMPORTANCES
# ==================================================
st.markdown("---")
st.markdown("### üìä Top 10 Feature Importances")
importances = pd.DataFrame({'Feature': train_columns, 'Importance': model.feature_importances_})
importances = importances.sort_values(by='Importance', ascending=False)

st.bar_chart(importances.head(10).set_index('Feature'))
